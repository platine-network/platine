// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: platine/treasury/distribution.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Distribution struct {
	// staking pool defines the proportion of the minted mint denom that is to be
	// allocated as staking rewards.
	StakingPool github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=stakingPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"staking_pool,omitempty" yaml:"staking_pool"`
	// ecosystem pool defines the proportion of the minted mint denom that is
	// to be allocated as ecosystem pool incentives.
	EcosystemPool github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=ecosystemPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ecosystem_pool,omitempty" yaml:"ecosystem_pool"`
	// developer pool defines the proportion of the minted mint denom
	// to pay developers for their past and future work
	DeveloperPool github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=developerPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"developer_pool,omitempty" yaml:"developer_pool"`
	// reward pool defines the proportion of the minted mint denom that is to be
	// allocated for rewards activities.
	RewardPool github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=rewardPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_pool,omitempty" yaml:"reward_pool"`
	// community pool defines the proportion of the minted mint denom that is
	// to be allocated to the community pool incentives.
	CommunityPool github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=communityPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"community_pool,omitempty" yaml:"community_pool"`
}

func (m *Distribution) Reset()         { *m = Distribution{} }
func (m *Distribution) String() string { return proto.CompactTextString(m) }
func (*Distribution) ProtoMessage()    {}
func (*Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6c97707070e91ce, []int{0}
}
func (m *Distribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distribution.Merge(m, src)
}
func (m *Distribution) XXX_Size() int {
	return m.Size()
}
func (m *Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_Distribution proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Distribution)(nil), "platinenetwork.platine.treasury.Distribution")
}

func init() {
	proto.RegisterFile("platine/treasury/distribution.proto", fileDescriptor_c6c97707070e91ce)
}

var fileDescriptor_c6c97707070e91ce = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xb1, 0x4b, 0xc3, 0x40,
	0x14, 0xc6, 0x73, 0x6a, 0x05, 0xa3, 0x2e, 0xd1, 0x4a, 0x71, 0x48, 0xe4, 0x04, 0x71, 0xb0, 0xc9,
	0xd0, 0xcd, 0xb1, 0x74, 0x15, 0x24, 0xa3, 0x20, 0x25, 0x4d, 0x8e, 0x78, 0x34, 0x97, 0x17, 0xee,
	0x2e, 0xd6, 0x0c, 0x0e, 0x8e, 0x6e, 0xfe, 0x33, 0xfe, 0x0f, 0x1d, 0x3b, 0x8a, 0x43, 0x90, 0x76,
	0x73, 0xf4, 0x2f, 0x10, 0x2f, 0x69, 0x4d, 0x28, 0x1d, 0xda, 0x29, 0x39, 0xde, 0xf7, 0xbe, 0xef,
	0xc7, 0x83, 0x4f, 0x3f, 0x4f, 0x22, 0x4f, 0xd2, 0x98, 0x38, 0x92, 0x13, 0x4f, 0xa4, 0x3c, 0x73,
	0x02, 0x2a, 0x24, 0xa7, 0x83, 0x54, 0x52, 0x88, 0xed, 0x84, 0x83, 0x04, 0xc3, 0x2a, 0x45, 0x31,
	0x91, 0x23, 0xe0, 0x43, 0xbb, 0x7c, 0xda, 0xf3, 0x9d, 0xd3, 0xe3, 0x10, 0x42, 0x50, 0x5a, 0xe7,
	0xef, 0xaf, 0x58, 0xc3, 0xef, 0x0d, 0xfd, 0xa0, 0x57, 0x71, 0x33, 0x5e, 0x90, 0xbe, 0x2f, 0xa4,
	0x37, 0xa4, 0x71, 0x78, 0x0b, 0x10, 0xb5, 0xd0, 0x19, 0xba, 0xdc, 0xeb, 0xf6, 0xc7, 0xb9, 0xa5,
	0x7d, 0xe6, 0xd6, 0x45, 0x48, 0xe5, 0x43, 0x3a, 0xb0, 0x7d, 0x60, 0x8e, 0x0f, 0x82, 0x81, 0x28,
	0x3f, 0x6d, 0x11, 0x0c, 0x1d, 0x99, 0x25, 0x44, 0xd8, 0x3d, 0xe2, 0x7f, 0xe7, 0xd6, 0x49, 0x69,
	0xd2, 0x4f, 0x00, 0xa2, 0x2b, 0x60, 0x54, 0x12, 0x96, 0xc8, 0xec, 0x27, 0xb7, 0x8e, 0x32, 0x8f,
	0x45, 0xd7, 0xb8, 0x3a, 0xc7, 0x6e, 0x35, 0xd3, 0x78, 0x45, 0xfa, 0x21, 0xf1, 0x41, 0x64, 0x42,
	0x12, 0xa6, 0x28, 0xb6, 0x14, 0x85, 0xbf, 0x36, 0x45, 0x6b, 0x61, 0xb3, 0xcc, 0xd1, 0x2c, 0x38,
	0xea, 0x0a, 0xec, 0xd6, 0x93, 0x15, 0x4b, 0x40, 0x1e, 0x49, 0x04, 0x09, 0xe1, 0x8a, 0x65, 0x7b,
	0x53, 0x96, 0x85, 0xcd, 0x4a, 0x96, 0xba, 0x02, 0xbb, 0xf5, 0x64, 0xe3, 0x59, 0xd7, 0x39, 0x19,
	0x79, 0x3c, 0x50, 0x1c, 0x3b, 0x8a, 0xe3, 0x7e, 0x6d, 0x8e, 0x66, 0xe1, 0xb1, 0x0c, 0x61, 0x14,
	0x10, 0x95, 0x31, 0x76, 0x2b, 0x81, 0xea, 0x14, 0x3e, 0x30, 0x96, 0xc6, 0x54, 0x66, 0x0a, 0xa1,
	0xb1, 0xe9, 0x29, 0x16, 0x36, 0x2b, 0x4f, 0x51, 0x57, 0x60, 0xb7, 0x9e, 0xdc, 0xbd, 0x19, 0x4f,
	0x4d, 0x34, 0x99, 0x9a, 0xe8, 0x6b, 0x6a, 0xa2, 0xb7, 0x99, 0xa9, 0x4d, 0x66, 0xa6, 0xf6, 0x31,
	0x33, 0xb5, 0xbb, 0x4e, 0x85, 0xa2, 0x2c, 0x41, 0xbb, 0x2c, 0xc5, 0xfc, 0xed, 0x3c, 0xfd, 0x57,
	0x49, 0x61, 0x0d, 0x76, 0x55, 0x1b, 0x3a, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x30, 0x26, 0x34,
	0x9c, 0x6b, 0x03, 0x00, 0x00,
}

func (m *Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Distribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CommunityPool.Size()
		i -= size
		if _, err := m.CommunityPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDistribution(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.RewardPool.Size()
		i -= size
		if _, err := m.RewardPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDistribution(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.DeveloperPool.Size()
		i -= size
		if _, err := m.DeveloperPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDistribution(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.EcosystemPool.Size()
		i -= size
		if _, err := m.EcosystemPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDistribution(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.StakingPool.Size()
		i -= size
		if _, err := m.StakingPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDistribution(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDistribution(dAtA []byte, offset int, v uint64) int {
	offset -= sovDistribution(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Distribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakingPool.Size()
	n += 1 + l + sovDistribution(uint64(l))
	l = m.EcosystemPool.Size()
	n += 1 + l + sovDistribution(uint64(l))
	l = m.DeveloperPool.Size()
	n += 1 + l + sovDistribution(uint64(l))
	l = m.RewardPool.Size()
	n += 1 + l + sovDistribution(uint64(l))
	l = m.CommunityPool.Size()
	n += 1 + l + sovDistribution(uint64(l))
	return n
}

func sovDistribution(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDistribution(x uint64) (n int) {
	return sovDistribution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcosystemPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EcosystemPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeveloperPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommunityPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDistribution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDistribution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDistribution
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDistribution
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDistribution
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDistribution        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDistribution          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDistribution = fmt.Errorf("proto: unexpected end of group")
)
