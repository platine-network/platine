syntax = "proto3";
package platinenetwork.platine.token;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "platine/token/token.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/platine-network/platine/x/token/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a Token by id.
	rpc Token(QueryGetTokenRequest) returns (QueryGetTokenResponse) {
		option (google.api.http).get = "/platine/token/{id}";
	}

	// Queries a list of Token items.
	rpc TokenAll(QueryAllTokenRequest) returns (QueryAllTokenResponse) {
		option (google.api.http).get = "/platine/token";
	}

  // Queries a list of Token items for owner.
	rpc TokenList(QueryTokenListRequest) returns (QueryTokenListResponse) {
		option (google.api.http).get = "/platine/token/list";
	}

// this line is used by starport scaffolding # 2
}

message QueryGetTokenRequest {
	string id = 1;
}

message QueryGetTokenResponse {
	Token Token = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokenRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokenResponse {
	repeated Token Token = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTokenListRequest {
	string owner = 1;
}

message QueryTokenListResponse {
	repeated string Token = 1;
}

// this line is used by starport scaffolding # 3
