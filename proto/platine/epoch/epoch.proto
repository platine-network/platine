syntax = "proto3";
package platinenetwork.platine.epoch;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/platine-network/platine/x/epoch/types";

message Epoch {
  // identifier is a unique reference to this particular timer.
  string identifier = 1 ;

  // start time is the time at which the timer first ever ticks.
  // If start time is in the future, the epoch will not begin until the start
  // time.
  google.protobuf.Timestamp startTime = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "start_time,omitempty",
    (gogoproto.moretags) = "yaml:\"start_time\""
  ]; 

  // duration is the time in between epoch ticks.
  // In order for intended behavior to be met, duration should
  // be greater than the chains expected block time.
  // Duration must be non-zero.
  google.protobuf.Duration duration = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "duration,omitempty",
    (gogoproto.moretags) = "yaml:\"duration\""
  ]; 

  // current epoch is the current epoch number, or in other words,
  // how many times has the timer 'ticked'.
  // The first tick (currentEpoch=1) is defined as
  // the first block whose blocktime is greater than the Epoch startTime.
  int64 currentEpoch = 4 [
    (gogoproto.jsontag) = "current_epoch,omitempty",
    (gogoproto.moretags) = "yaml:\"current_epoch\""
  ]; 

  // current epoch start time describes the start time of the current timer
  // interval. The interval is (currentEpochStartTime,
  // ccurrentEpochStartTime + duration] When the timer ticks, this is set to
  // currentEpochStartTime = lastEpochStartTime + duration only one timer
  // tick for a given identifier can occur per block.
  //
  // NOTE! The currentEpochStartTime may diverge significantly from the
  // wall-clock time the epoch began at. Wall-clock time of epoch start may be
  // >> currentEpochStartTime. Suppose currentEpochStartTime = 10,
  // duration = 5. Suppose the chain goes offline at t=14, and comes back online
  // at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
  // * The t=30 block will start the epoch for (10, 15]
  // * The t=31 block will start the epoch for (15, 20]
  // * The t=32 block will start the epoch for (20, 25]
  // * The t=33 block will start the epoch for (25, 30]
  // * The t=34 block will start the epoch for (30, 35]
  // * The **t=36** block will start the epoch for (35, 40]
  google.protobuf.Timestamp currentEpochStartTime = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "current_epoch_start_time,omitempty",
    (gogoproto.moretags) = "yaml:\"current_epoch_start_time\""
  ]; 

  // epoch_counting_started is a boolean, that indicates whether this
  // epoch timer has began yet.
  bool epochCountingStarted = 6 [
    (gogoproto.jsontag) = "epoch_counting_started,omitempty",
    (gogoproto.moretags) = "yaml:\"epoch_counting_started\""
  ]; 

  // current epoch start height is the block height at which the current epoch
  // started. (The block height at which the timer last ticked)
  int64 currentEpochStartHeight = 7 [
    (gogoproto.jsontag) = "current_epoch_start_height,omitempty",
    (gogoproto.moretags) = "yaml:\"current_epoch_start_height\""
  ]; 
  
}
